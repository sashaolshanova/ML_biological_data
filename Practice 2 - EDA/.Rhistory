label = chololate_data_numeric$Class_rating,
classification = chololate_data_numeric$Class_rating
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# creating the same column with index in both dataframe for merging
df_transformed %>%
mutate(index = "1")
chololate_data_numeric %>%
mutate(index = "1")
# filling index column with indexes
numb_rows <- nrow(df_transformed)
for(i in 1: numb_rows) {
df_transformed$index[i] <- i
chololate_data_numeric$index[i] <- i
}
chololate_data_numeric
#merge
jointdataset <- merge(chololate_data_numeric, df_transformed, by = 'index')
jointdataset
# deleting columns we don't need to use for PCA and t-SNE
join_new <- jointdataset[ , !names(jointdataset) %in%
c("Class_rating","index")]
# Preform PCA on our data
prcomp_choco_num <- prcomp(join_new)
pca_choco_num <- data.frame(
PC1 = prcomp_choco_num$x[, 1],
PC2 = prcomp_choco_num$x[, 2],
classification = chololate_data_numeric$Class_rating,
label = chololate_data_numeric$Class_rating
)
ggplot(pca_choco_num, aes(x = PC1, y = PC2, label = label, col = classification)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# Preform t-SNE on our data
library(Rtsne)
tsne_chololate_num <- Rtsne(join_new,
pca = FALSE, perplexity = 10,
theta = 0.0, check_duplicates = FALSE
)
tsne_chololate_num <- data.frame(
TSNE1 = tsne_chololate_num$Y[, 1],
TSNE2 = tsne_chololate_num$Y[, 2],
label = chololate_data_numeric$Class_rating,
classification = chololate_data_numeric$Class_rating
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
chololate_data_for_corr <- raw_chocolate_data[, c("REF", "Review.Date", "Cocoa.Percent", "Rating")]
mydata.cor = cor(chololate_data_for_corr)
corrplot(mydata.cor)
ggplot(raw_chocolate_data, aes(x=REF, y=Rating)) + geom_point() + geom_smooth(se=FALSE)
commap <- group_by(raw_chocolate_data, Company.Location)
commap1 <- summarise(commap,  count=n())
map1 <- joinCountryData2Map(commap1, joinCode="NAME", nameJoinColumn="Company.Location")
mapCountryData(map1, nameColumnToPlot="count", mapTitle="Chocolate Company Distribution" , colourPalette = "negpos8")
# plotting a scatter plot (with smoothing curve)
ggplot(raw_chocolate_data, aes(x=Cocoa.Percent, y=Rating)) + geom_point() + geom_smooth(se=FALSE)
loca <- group_by(raw_chocolate_data, Company.Location)
good <- summarise(loca,  count=n(),
rate1= mean(Rating))
good1<- arrange(good, desc(rate1))
ggplot(good1,aes(x=reorder(Company.Location,rate1), y=rate1)) +geom_point(aes(size=count, colour=factor(rate1)), alpha=1) + theme_minimal(base_size = 9)+
theme(axis.text.x = element_text(angle = 45, hjust = 1) , legend.position="none") +
labs(x="Country", "Chocolate Rating", "Chocolate Rating vs Country")
print(max(raw_chocolate_data$Rating))
raw_chocolate_data$Company.Location[raw_chocolate_data$Rating==5]
sum(is.na(raw_chocolate_data$Bean.Type))
Bean_type_without_NAN <- raw_chocolate_data[!is.na(raw_chocolate_data$Bean.Type), ]
Bean_type_without_NAN
chololate_data_for_corr <- raw_chocolate_data[, c("REF", "Review.Date", "Cocoa.Percent", "Rating")]
mydata.cor = cor(chololate_data_for_corr)
corrplot(mydata.cor)
# plotting a scatter plot (with smoothing curve)
ggplot(raw_chocolate_data, aes(x=Cocoa.Percent, y=Rating)) + geom_point() + geom_smooth(se=FALSE)
commap <- group_by(raw_chocolate_data, Company.Location)
commap1 <- summarise(commap,  count=n())
map1 <- joinCountryData2Map(commap1, joinCode="NAME", nameJoinColumn="Company.Location")
mapCountryData(map1, nameColumnToPlot="count", mapTitle="Chocolate Company Distribution" , colourPalette = "negpos8")
loca <- group_by(raw_chocolate_data, Company.Location)
good <- summarise(loca,  count=n(),
rate1= mean(Rating))
good1<- arrange(good, desc(rate1))
ggplot(good1,aes(x=reorder(Company.Location,rate1), y=rate1)) +geom_point(aes(size=count, colour=factor(rate1)), alpha=1) + theme_minimal(base_size = 9)+
theme(axis.text.x = element_text(angle = 45, hjust = 1) , legend.position="none") +
labs(x="Country", "Chocolate Rating", "Chocolate Rating vs Country")
loca <- group_by(raw_chocolate_data, Company.Location)
good <- summarise(loca,  count=n(),
rate1= mean(Rating))
good1<- arrange(good, desc(rate1))
ggplot(good1,aes(x=reorder(Company.Location,rate1), y=rate1)) +geom_point(aes(size=count, colour=factor(rate1)), alpha=1) + theme_minimal(base_size = 9)+
theme(axis.text.x = element_text(angle = 45, hjust = 1) , legend.position="none") +
labs(x="Country", "Chocolate Rating", "Chocolate Rating vs Country")
commap <- group_by(raw_chocolate_data, Company.Location)
commap1 <- summarise(commap,  count=n())
map1 <- joinCountryData2Map(commap1, joinCode="NAME", nameJoinColumn="Company.Location")
mapCountryData(map1, nameColumnToPlot="count", mapTitle="Chocolate Company Distribution" , colourPalette = "negpos8")
print(max(raw_chocolate_data$Rating))
raw_chocolate_data_rat <- raw_chocolate_data[order(raw_chocolate_data$Rating, decreasing=TRUE), ]
raw_chocolate_data_rat
raw_chocolate_data_rat <- raw_chocolate_data[order(raw_chocolate_data$Rating, decreasing=TRUE), ]
raw_chocolate_data_rat[1]
raw_chocolate_data_rat <- raw_chocolate_data[order(raw_chocolate_data$Rating, decreasing=TRUE), ]
raw_chocolate_data_rat[, 1]
raw_chocolate_data_rat <- raw_chocolate_data[order(raw_chocolate_data$Rating, decreasing=TRUE), ]
raw_chocolate_data_rat[1, ]
library(ggplot2)
library(ggrepel)
library(cowplot)
library(GGally)
library(tidyverse)
#install.packages("corrplot")
library(corrplot)
#install.packages(c('maptools', 'wordcloud'))
library(maptools)
library(wordcloud)
#install.packages(c('rworldmap', 'corrplot'))
library(corrplot)
library(rworldmap)
raw_chocolate_data <- read.csv("flavors_of_cacao.csv", header = TRUE)
str(raw_chocolate_data)
summary(raw_chocolate_data)
raw_chocolate_data
class(raw_chocolate_data)
# get dimensions, number of rows and columns
dim(raw_chocolate_data)
nrow(raw_chocolate_data)
ncol(raw_chocolate_data)
# column names
names(raw_chocolate_data)
raw_chocolate_data_no_dupl <- raw_chocolate_data %>% distinct()
nrow(raw_chocolate_data_no_dupl)
#removing sign of percent
raw_chocolate_data$Cocoa.Percent<-gsub("%","",as.character(raw_chocolate_data$Cocoa.Percent))
head(raw_chocolate_data)
#changing data type
raw_chocolate_data <- transform(raw_chocolate_data, Cocoa.Percent = as.numeric(Cocoa.Percent))
head(raw_chocolate_data)
sum(is.na(raw_chocolate_data))
apply(raw_chocolate_data, 2, function(x) any(is.na(x)))
Missing_Beans <- raw_chocolate_data %>% count(Bean.Type) %>% arrange(desc(n))
print(Missing_Beans)
for (name in names(raw_chocolate_data)) {
strange_values <- nrow(raw_chocolate_data[raw_chocolate_data[[name]] == "\u00A0", ])
print(paste(name, strange_values))
}
raw_chocolate_data <- raw_chocolate_data[raw_chocolate_data$Broad.Bean.Origin != "\u00A0", ]
raw_chocolate_data
plot_bean_type <- ggplot(data = raw_chocolate_data) +
geom_count(mapping = aes(x = Bean.Type, y = Company.Location))
plot_bean_type + theme(axis.text.x = element_text(angle = 90))
bean_type <- raw_chocolate_data[raw_chocolate_data$Company.Location == "France", ]
bean_type
plot_bean_origin <- ggplot(data = raw_chocolate_data) +
geom_count(mapping = aes(x = Bean.Type, y = Broad.Bean.Origin))
plot_bean_origin + theme(axis.text.x = element_text(angle = 90))
bean_type_list <- unique(raw_chocolate_data$Bean.Type)
bean_type_list
empty_list <- list()
item <- list()
for (i in bean_type_list){
if (i == "\u00A0" | i == "") print("no bean types")
else
item <- c(i)
empty_list <- append(empty_list, item)
}
columns = c("Bean.Type","Broad.Bean.Origin")
bean_type_origin = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(bean_type_origin) = columns
for (i in empty_list){
Forastero <- raw_chocolate_data[raw_chocolate_data$Bean.Type == i, ]
grp_tbl <- Forastero %>% group_by(Broad.Bean.Origin)%>%
summarise(total_count=n(),
.groups = 'drop')%>%
as.data.frame()
newdata <- grp_tbl[order(grp_tbl$total_count, decreasing=TRUE), ]
bean_origin = newdata$Broad.Bean.Origin[1]
bean_type_origin[nrow(bean_type_origin) + 1,] <- c(i,bean_origin)
#print(paste(i,bean_origin))
}
bean_type_origin
P <- nrow(raw_chocolate_data)
number = 0
for(i in 1: P){
bean_origin = raw_chocolate_data$Broad.Bean.Origin[i]
bean_type_r = raw_chocolate_data$Bean.Type[i]
#print(bean_type_r)
if (bean_type_r == "\u00A0" | bean_type_r == "")
number = number + 1
table = bean_type_origin[bean_type_origin$Broad.Bean.Origin == bean_origin, ]
value = table$Bean.Type[1]
#print(value)
raw_chocolate_data$Bean.Type[i] <- value
}
print(number)
sum(is.na(raw_chocolate_data$Bean.Type))
Bean_type_without_NAN <- raw_chocolate_data[!is.na(raw_chocolate_data$Bean.Type), ]
Bean_type_without_NAN
ggplot(data = raw_chocolate_data) +
geom_histogram(mapping = aes(x = Rating), binwidth = 0.1)
chololate_data_for_corr <- raw_chocolate_data[, c("REF", "Review.Date", "Cocoa.Percent", "Rating")]
mydata.cor = cor(chololate_data_for_corr)
corrplot(mydata.cor)
# plotting a scatter plot (with smoothing curve)
ggplot(raw_chocolate_data, aes(x=Cocoa.Percent, y=Rating)) + geom_point() + geom_smooth(se=FALSE)
loca <- group_by(raw_chocolate_data, Company.Location)
good <- summarise(loca,  count=n(),
rate1= mean(Rating))
good1<- arrange(good, desc(rate1))
ggplot(good1,aes(x=reorder(Company.Location,rate1), y=rate1)) +geom_point(aes(size=count, colour=factor(rate1)), alpha=1) + theme_minimal(base_size = 9)+
theme(axis.text.x = element_text(angle = 45, hjust = 1) , legend.position="none") +
labs(x="Country", "Chocolate Rating", "Chocolate Rating vs Country")
commap <- group_by(raw_chocolate_data, Company.Location)
commap1 <- summarise(commap,  count=n())
map1 <- joinCountryData2Map(commap1, joinCode="NAME", nameJoinColumn="Company.Location")
mapCountryData(map1, nameColumnToPlot="count", mapTitle="Chocolate Company Distribution" , colourPalette = "negpos8")
raw_chocolate_data_rat <- raw_chocolate_data[order(raw_chocolate_data$Rating, decreasing=TRUE), ]
raw_chocolate_data_rat[1, ]
#new column
raw_chocolate_data %>%
mutate(Class_rating = "1")
#filling the column with categories
number_ratting_rows <- nrow(raw_chocolate_data)
for(i in 1: number_ratting_rows){
rating <- raw_chocolate_data$Rating[i]
if (rating <= 2.5){
raw_chocolate_data$Class_rating[i] <- "bad"
}else if(2.5 < rating &rating < 3.5){
raw_chocolate_data$Class_rating[i] <- "good"
}else{
raw_chocolate_data$Class_rating[i] <- "exellent"
}}
numeric_vars <- c("REF", "Review.Date", "Cocoa.Percent", "Class_rating")
chololate_data_numeric <- raw_chocolate_data[, numeric_vars]
chololate_data_numeric
# Preform PCA on our data
prcomp_choco_num <- prcomp(chololate_data_numeric[, 1:3])
pca_choco_num <- data.frame(
PC1 = prcomp_choco_num$x[, 1],
PC2 = prcomp_choco_num$x[, 2],
classification = chololate_data_numeric$Class_rating,
label = chololate_data_numeric$Class_rating
)
ggplot(pca_choco_num, aes(x = PC1, y = PC2, label = label, col = classification)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# Preform TSNE on our data
library(Rtsne)
#prcomp_choco_num <- prcomp(chololate_data_numeric[, 1:3])
tsne_chololate_num <- Rtsne(chololate_data_numeric[, 1:3],
pca = FALSE, perplexity = 10,
theta = 0.0, check_duplicates = FALSE
)
tsne_chololate_num <- data.frame(
TSNE1 = tsne_chololate_num$Y[, 1],
TSNE2 = tsne_chololate_num$Y[, 2],
label = chololate_data_numeric$Class_rating,
classification = chololate_data_numeric$Class_rating
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(GGally)
library(tidyverse)
#install.packages("corrplot")
library(corrplot)
#install.packages(c('maptools', 'wordcloud'))
library(maptools)
library(wordcloud)
#install.packages(c('rworldmap', 'corrplot'))
library(corrplot)
library(rworldmap)
raw_chocolate_data <- read.csv("flavors_of_cacao.csv", header = TRUE)
str(raw_chocolate_data)
summary(raw_chocolate_data)
raw_chocolate_data
class(raw_chocolate_data)
# get dimensions, number of rows and columns
dim(raw_chocolate_data)
nrow(raw_chocolate_data)
ncol(raw_chocolate_data)
# column names
names(raw_chocolate_data)
raw_chocolate_data_no_dupl <- raw_chocolate_data %>% distinct()
nrow(raw_chocolate_data_no_dupl)
#removing sign of percent
raw_chocolate_data$Cocoa.Percent<-gsub("%","",as.character(raw_chocolate_data$Cocoa.Percent))
head(raw_chocolate_data)
#changing data type
raw_chocolate_data <- transform(raw_chocolate_data, Cocoa.Percent = as.numeric(Cocoa.Percent))
head(raw_chocolate_data)
sum(is.na(raw_chocolate_data))
apply(raw_chocolate_data, 2, function(x) any(is.na(x)))
Missing_Beans <- raw_chocolate_data %>% count(Bean.Type) %>% arrange(desc(n))
print(Missing_Beans)
for (name in names(raw_chocolate_data)) {
strange_values <- nrow(raw_chocolate_data[raw_chocolate_data[[name]] == "\u00A0", ])
print(paste(name, strange_values))
}
raw_chocolate_data <- raw_chocolate_data[raw_chocolate_data$Broad.Bean.Origin != "\u00A0", ]
raw_chocolate_data
plot_bean_type <- ggplot(data = raw_chocolate_data) +
geom_count(mapping = aes(x = Bean.Type, y = Company.Location))
plot_bean_type + theme(axis.text.x = element_text(angle = 90))
bean_type <- raw_chocolate_data[raw_chocolate_data$Company.Location == "France", ]
bean_type
plot_bean_origin <- ggplot(data = raw_chocolate_data) +
geom_count(mapping = aes(x = Bean.Type, y = Broad.Bean.Origin))
plot_bean_origin + theme(axis.text.x = element_text(angle = 90))
bean_type_list <- unique(raw_chocolate_data$Bean.Type)
bean_type_list
empty_list <- list()
item <- list()
for (i in bean_type_list){
if (i == "\u00A0" | i == "") print("no bean types")
else
item <- c(i)
empty_list <- append(empty_list, item)
}
columns = c("Bean.Type","Broad.Bean.Origin")
bean_type_origin = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(bean_type_origin) = columns
for (i in empty_list){
Forastero <- raw_chocolate_data[raw_chocolate_data$Bean.Type == i, ]
grp_tbl <- Forastero %>% group_by(Broad.Bean.Origin)%>%
summarise(total_count=n(),
.groups = 'drop')%>%
as.data.frame()
newdata <- grp_tbl[order(grp_tbl$total_count, decreasing=TRUE), ]
bean_origin = newdata$Broad.Bean.Origin[1]
bean_type_origin[nrow(bean_type_origin) + 1,] <- c(i,bean_origin)
#print(paste(i,bean_origin))
}
bean_type_origin
P <- nrow(raw_chocolate_data)
number = 0
for(i in 1: P){
bean_origin = raw_chocolate_data$Broad.Bean.Origin[i]
bean_type_r = raw_chocolate_data$Bean.Type[i]
#print(bean_type_r)
if (bean_type_r == "\u00A0" | bean_type_r == "")
number = number + 1
table = bean_type_origin[bean_type_origin$Broad.Bean.Origin == bean_origin, ]
value = table$Bean.Type[1]
#print(value)
raw_chocolate_data$Bean.Type[i] <- value
}
print(number)
sum(is.na(raw_chocolate_data$Bean.Type))
Bean_type_without_NAN <- raw_chocolate_data[!is.na(raw_chocolate_data$Bean.Type), ]
Bean_type_without_NAN
ggplot(data = raw_chocolate_data) +
geom_histogram(mapping = aes(x = Rating), binwidth = 0.1)
chololate_data_for_corr <- raw_chocolate_data[, c("REF", "Review.Date", "Cocoa.Percent", "Rating")]
mydata.cor = cor(chololate_data_for_corr)
corrplot(mydata.cor)
# plotting a scatter plot (with smoothing curve)
ggplot(raw_chocolate_data, aes(x=Cocoa.Percent, y=Rating)) + geom_point() + geom_smooth(se=FALSE)
loca <- group_by(raw_chocolate_data, Company.Location)
good <- summarise(loca,  count=n(),
rate1= mean(Rating))
good1<- arrange(good, desc(rate1))
ggplot(good1,aes(x=reorder(Company.Location,rate1), y=rate1)) +geom_point(aes(size=count, colour=factor(rate1)), alpha=1) + theme_minimal(base_size = 9)+
theme(axis.text.x = element_text(angle = 45, hjust = 1) , legend.position="none") +
labs(x="Country", "Chocolate Rating", "Chocolate Rating vs Country")
commap <- group_by(raw_chocolate_data, Company.Location)
commap1 <- summarise(commap,  count=n())
map1 <- joinCountryData2Map(commap1, joinCode="NAME", nameJoinColumn="Company.Location")
mapCountryData(map1, nameColumnToPlot="count", mapTitle="Chocolate Company Distribution" , colourPalette = "negpos8")
raw_chocolate_data_rat <- raw_chocolate_data[order(raw_chocolate_data$Rating, decreasing=TRUE), ]
raw_chocolate_data_rat[1, ]
#new column
raw_chocolate_data %>%
mutate(Class_rating = "1")
#filling the column with categories
number_ratting_rows <- nrow(raw_chocolate_data)
for(i in 1: number_ratting_rows){
rating <- raw_chocolate_data$Rating[i]
if (rating <= 2.5){
raw_chocolate_data$Class_rating[i] <- "bad"
}else if(2.5 < rating &rating < 3.5){
raw_chocolate_data$Class_rating[i] <- "good"
}else{
raw_chocolate_data$Class_rating[i] <- "exellent"
}}
numeric_vars <- c("REF", "Review.Date", "Cocoa.Percent", "Class_rating")
chololate_data_numeric <- raw_chocolate_data[, numeric_vars]
chololate_data_numeric
# Preform PCA on our data
prcomp_choco_num <- prcomp(chololate_data_numeric[, 1:3])
pca_choco_num <- data.frame(
PC1 = prcomp_choco_num$x[, 1],
PC2 = prcomp_choco_num$x[, 2],
classification = chololate_data_numeric$Class_rating,
label = chololate_data_numeric$Class_rating
)
ggplot(pca_choco_num, aes(x = PC1, y = PC2, label = label, col = classification)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# Preform TSNE on our data
library(Rtsne)
#prcomp_choco_num <- prcomp(chololate_data_numeric[, 1:3])
tsne_chololate_num <- Rtsne(chololate_data_numeric[, 1:3],
pca = FALSE, perplexity = 10,
theta = 0.0, check_duplicates = FALSE
)
tsne_chololate_num <- data.frame(
TSNE1 = tsne_chololate_num$Y[, 1],
TSNE2 = tsne_chololate_num$Y[, 2],
label = chololate_data_numeric$Class_rating,
classification = chololate_data_numeric$Class_rating
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
library(caret)
df_dummies <- dummyVars(~ Company...Maker.if.known. + Company.Location + Specific.Bean.Origin.or.Bar.Name + Broad.Bean.Origin , data = raw_chocolate_data)
df_transformed <- data.frame(predict(df_dummies, newdata = raw_chocolate_data))
# Preform PCA on our data
prcomp_choco_num <- prcomp(df_transformed)
pca_choco_num <- data.frame(
PC1 = prcomp_choco_num$x[, 1],
PC2 = prcomp_choco_num$x[, 2],
classification = chololate_data_numeric$Class_rating,
label = chololate_data_numeric$Class_rating
)
ggplot(pca_choco_num, aes(x = PC1, y = PC2, label = label, col = classification)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# Preform t-SNE on our data
library(Rtsne)
tsne_chololate_num <- Rtsne(df_transformed,
pca = FALSE, perplexity = 10,
theta = 0.0, check_duplicates = FALSE
)
tsne_chololate_num <- data.frame(
TSNE1 = tsne_chololate_num$Y[, 1],
TSNE2 = tsne_chololate_num$Y[, 2],
label = chololate_data_numeric$Class_rating,
classification = chololate_data_numeric$Class_rating
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# creating the same column with index in both dataframe for merging
df_transformed %>%
mutate(index = "1")
chololate_data_numeric %>%
mutate(index = "1")
# filling index column with indexes
numb_rows <- nrow(df_transformed)
for(i in 1: numb_rows) {
df_transformed$index[i] <- i
chololate_data_numeric$index[i] <- i
}
chololate_data_numeric
#merge
jointdataset <- merge(chololate_data_numeric, df_transformed, by = 'index')
jointdataset
# deleting columns we don't need to use for PCA and t-SNE
join_new <- jointdataset[ , !names(jointdataset) %in%
c("Class_rating","index")]
# Preform PCA on our data
prcomp_choco_num <- prcomp(join_new)
pca_choco_num <- data.frame(
PC1 = prcomp_choco_num$x[, 1],
PC2 = prcomp_choco_num$x[, 2],
classification = chololate_data_numeric$Class_rating,
label = chololate_data_numeric$Class_rating
)
ggplot(pca_choco_num, aes(x = PC1, y = PC2, label = label, col = classification)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
# Preform t-SNE on our data
library(Rtsne)
tsne_chololate_num <- Rtsne(join_new,
pca = FALSE, perplexity = 10,
theta = 0.0, check_duplicates = FALSE
)
tsne_chololate_num <- data.frame(
TSNE1 = tsne_chololate_num$Y[, 1],
TSNE2 = tsne_chololate_num$Y[, 2],
label = chololate_data_numeric$Class_rating,
classification = chololate_data_numeric$Class_rating
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
tinytex::install_tinytex()
