accuracy(truth =High_Low_value, .pred_class)
baL_acc = rf_testing_pred %>%                   # test set predictions
bal_accuracy(truth =High_Low_value, .pred_class)
#print(acc %>% pull(.estimate))
#print(baL_acc %>% pull(.estimate))
models_dict[[name_cl]][nrow(models_dict[[name_cl]]) + 1,] <- c(number, acc %>% pull(.estimate), baL_acc %>% pull(.estimate))
}
}
# types of models to use
classifiers_to_use = c('Random Forest', 'Decition tree', 'SVM', 'kNeighbours')
#results dictionary
models_dict <- list()
model_data = data.frame(matrix(ncol = 3, nrow = 0))
colnames(model_data) <- c("Threshold", "Accuracy" , "Balanced_Accuracy")
for (classifier in classifiers_to_use) {
print(classifier)
models_dict[[classifier]] <- model_data
}
set.seed(123)
for (number in threshold_list) {
#print(number)
#models base settings
rand_forest = rand_forest(trees = 1000) %>% set_engine("ranger") %>% set_mode("classification")
dec_tree = decision_tree() %>% set_engine("rpart") %>% set_mode("classification")
#data split
split_threshold <- initial_split(empty_dict[[paste0("df_threshold_", number)]] %>% select(-Canonical.SMILES, -Ligand, -Permeability.coefficient, -name, -Accumulation_class),
strata=as.integer(empty_dict[[paste0("df_threshold_", number)]]$High_Low_value), prop = 7/10)
split_threshold_train <- training(split_threshold)
split_threshold_test  <- testing(split_threshold)
split_threshold_train$High_Low_value  <- as.factor(split_threshold_train$High_Low_value)
split_threshold_test$High_Low_value <- as.factor(split_threshold_test$High_Low_value)
# WHAT MODEL TO USE?
for (name_cl in classifiers_to_use) {
#print(name_cl)
if (name_cl == "Random Forest") {
rf_mod = rand_forest
}
if (name_cl == "Decition tree") {
rf_mod = dec_tree
}
#    if (name_cl == "SVM") {
#      rf_mod = svm(
#                type = "C-classification",
#                kernel = "linear",
#                scale = FALSE)
#    }
if (name_cl == "kNeighbours") {
rf_mod = knn(k = 3)
}
#print(name_cl)
#fitting model
rf_fit <-
rf_mod %>%
fit(High_Low_value ~ ., data = split_threshold_train)
rf_testing_pred <-
predict(rf_fit, split_threshold_test) %>%
bind_cols(predict(rf_fit, split_threshold_test, type = "prob")) %>%
bind_cols(split_threshold_test %>% select(High_Low_value))
# Accuracy calculation
acc = rf_testing_pred %>%                   # test set predictions
accuracy(truth =High_Low_value, .pred_class)
baL_acc = rf_testing_pred %>%                   # test set predictions
bal_accuracy(truth =High_Low_value, .pred_class)
#print(acc %>% pull(.estimate))
#print(baL_acc %>% pull(.estimate))
models_dict[[name_cl]][nrow(models_dict[[name_cl]]) + 1,] <- c(number, acc %>% pull(.estimate), baL_acc %>% pull(.estimate))
}
}
library(dplyr)
library(ggplot2)
library(plotly)
library(glue)
library(corrplot)
library(Rtsne)
library(tidymodels)
library('fastDummies')
library(randomForest)
library(caret)
library(patchwork)
library(gridExtra)
library(e1071)
library(class)
set.seed(123)
for (number in threshold_list) {
#print(number)
#models base settings
rand_forest = rand_forest(trees = 1000) %>% set_engine("ranger") %>% set_mode("classification")
dec_tree = decision_tree() %>% set_engine("rpart") %>% set_mode("classification")
#data split
split_threshold <- initial_split(empty_dict[[paste0("df_threshold_", number)]] %>% select(-Canonical.SMILES, -Ligand, -Permeability.coefficient, -name, -Accumulation_class),
strata=as.integer(empty_dict[[paste0("df_threshold_", number)]]$High_Low_value), prop = 7/10)
split_threshold_train <- training(split_threshold)
split_threshold_test  <- testing(split_threshold)
split_threshold_train$High_Low_value  <- as.factor(split_threshold_train$High_Low_value)
split_threshold_test$High_Low_value <- as.factor(split_threshold_test$High_Low_value)
# WHAT MODEL TO USE?
for (name_cl in classifiers_to_use) {
#print(name_cl)
if (name_cl == "Random Forest") {
rf_mod = rand_forest
}
if (name_cl == "Decition tree") {
rf_mod = dec_tree
}
#    if (name_cl == "SVM") {
#      rf_mod = svm(
#                type = "C-classification",
#                kernel = "linear",
#                scale = FALSE)
#    }
if (name_cl == "kNeighbours") {
rf_mod = knn(k = 3)
}
#print(name_cl)
#fitting model
rf_fit <-
rf_mod %>%
fit(High_Low_value ~ ., data = split_threshold_train)
rf_testing_pred <-
predict(rf_fit, split_threshold_test) %>%
bind_cols(predict(rf_fit, split_threshold_test, type = "prob")) %>%
bind_cols(split_threshold_test %>% select(High_Low_value))
# Accuracy calculation
acc = rf_testing_pred %>%                   # test set predictions
accuracy(truth =High_Low_value, .pred_class)
baL_acc = rf_testing_pred %>%                   # test set predictions
bal_accuracy(truth =High_Low_value, .pred_class)
#print(acc %>% pull(.estimate))
#print(baL_acc %>% pull(.estimate))
models_dict[[name_cl]][nrow(models_dict[[name_cl]]) + 1,] <- c(number, acc %>% pull(.estimate), baL_acc %>% pull(.estimate))
}
}
library(dplyr)
library(ggplot2)
library(plotly)
library(glue)
library(corrplot)
library(Rtsne)
library(tidymodels)
library('fastDummies')
library(randomForest)
library(caret)
library(patchwork)
library(gridExtra)
library(e1071)
library(class)
# read and look at data
data <- read.csv("data_final_project_cleaned.csv")
data
# columns names
head(names(data), 8)
data[, 7:10]
summary(data[, 7:10])
anyNA(data)
data[is.na(data)] <- as.integer(0)
anyNA(data)
list_residues = names(data[, 7:790])
myList_delete <- c()
myList_save <- c()
for (name in list_residues) {
sum_value = sum(data[name])
if (sum_value == 0) {
myList_delete <- append(myList_delete, name)
}
else {
myList_save <- append(myList_save, name)
}
}
df = data[,!(names(data) %in% myList_delete)]
print('Number of features to save')
print(length(myList_save))
print('Number of features to delete')
print(length(myList_delete))
df
asp113 <- c("A.113.ASP..HDonor.nc", "A.113.ASP..HDonor.cc", "A.113.ASP..HDonor.nn", "A.113.ASP..HDonor.cn", "A.113.ASP..Salt", "A.113.ASP..HPhob")
glu117 <- c("A.117.GLU..HDonor.nc", "A.117.GLU..HDonor.cn", "A.117.GLU..HDonor.nn", "A.117.GLU..HDonor.cc", "A.117.GLU..Salt", "A.117.GLU..HPhob", "A.117.GLU..XBond")
arg132 <- c("A.132.ARG..HAccep.nn", "A.132.ARG..HAccep.cn", "A.132.ARG..HAccep.cc", "A.132.ARG..HAccep.nc","A.132.ARG..XBond","A.132.ARG..Salt", "A.132.ARG..PiCat" )
arg82 <-  c("A.82.ARG..HAccep.nn", "A.82.ARG..HAccep.cn", "A.82.ARG..HAccep.cc", "A.82.ARG..HAccep.nc", "A.82.ARG..XBond","A.82.ARG..Salt","A.82.ARG..PiCat")
agr42 <-  c("A.42.ARG..HAccep.nn", "A.42.ARG..HAccep.cn", "A.42.ARG..HAccep.cc", "A.42.ARG..HAccep.nc","A.42.ARG..XBond","A.42.ARG..Salt","A.42.ARG..PiCat", "A.42.ARG..HPhob")
lys16 <-  c("A.16.LYS..HAccep.cn", "A.16.LYS..HAccep.cc", "A.16.LYS..XBond", "A.16.LYS..Salt", "A.16.LYS..PiCat", "A.16.LYS..HPhob")
list_important_res <-list(list1 = asp113, list2 = glu117, list3 = arg132 , list4= arg82 , list5 = lys16)
df[1,][, 0:6]
threshold_list <- c(1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
empty_dict <- list()
real_data = data.frame(matrix(ncol = 182, nrow = 0))
colnames(real_data) <- c(names(df))
for (number in threshold_list) {
empty_dict[[paste0("df_threshold_", number)]] <- real_data
for (name in unique(df$name)) {
#print(name)
small_data = df[df['name'] == name ,]
#print(dim(small_data))
threshold = dim(small_data)[1]/number
#print(threshold)
list_values_row <- c(small_data[1,][, 0:6])
#print(list_values_row)
for (residue in myList_save) {
sum_value = sum(small_data[residue])
if (sum_value >= threshold) {
list_values_row<-append(list_values_row, as.integer(1))
} else {
list_values_row<- append(list_values_row, as.integer(0))
}
}
empty_dict[[paste0("df_threshold_", number)]][nrow(empty_dict[[paste0("df_threshold_", number)]]) + 1,] <- list_values_row
}
for (column_p in list_important_res) {
new_col <- c()
for (index in rownames(empty_dict[[paste0("df_threshold_", number)]])) {
sum_res = sum(empty_dict[[paste0("df_threshold_", number)]][index, column_p])
if (sum_res > 0) {
new_col<-append(new_col, as.integer(1))
} else {
new_col<- append(new_col, as.integer(0))
}
}
name_Y =paste0("residue", strsplit(column_p[1], split = '[.]')[[1]])
empty_dict[[paste0("df_threshold_", number)]][name_Y[2]] <- new_col
}
}
empty_dict$df_threshold_2
for (number in threshold_list) {
p2 <- ggplot(empty_dict[[paste0("df_threshold_", number)]], aes(x=as.character(FormalCharge), y=Permeability.coefficient, fill=as.character(residue113))) +
geom_boxplot() +
facet_wrap(~FormalCharge, scale="free") +
labs(x = "Charge + ASP113", y = "Permeability.coefficient", title = number)
print(p2)
}
for (number in threshold_list) {
plot <- ggplot(empty_dict[[paste0("df_threshold_", number)]], aes(x = as.character(residue113) , y = Permeability.coefficient)) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(x = "ASP113", y = "Permeability.coefficient", title = number)
print(plot)
}
ggplot(empty_dict$df_threshold_3, aes(x = as.character(FormalCharge) , y = Permeability.coefficient)) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(x = "Charge", y = "Permeability.coefficient", title = number)
ggplot(empty_dict$df_threshold_3, aes(fill=as.character(residue113), x= as.character(residue113), y=Permeability.coefficient)) +
geom_boxplot(notch = TRUE) +
geom_jitter(position = position_jitter(width = .05, height =0), shape=21, size=1.5) +
scale_fill_hue(l=40)
for (number in threshold_list) {
number_interaction <- c()
for (index in rownames(empty_dict[[paste0("df_threshold_", number)]])) {
sum_res = sum(empty_dict[[paste0("df_threshold_", number)]][index, 9:(dim(empty_dict[[paste0("df_threshold_", number)]])[2] - 5 )])
number_interaction  <- append(number_interaction, sum_res)
}
empty_dict[[paste0("df_threshold_", number)]]['all_interactions'] <- number_interaction
}
empty_dict
for (number in threshold_list) {
plot = ggplot(empty_dict[[paste0("df_threshold_", number)]], aes(x = Permeability.coefficient, y = all_interactions, label = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class, col = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5) +
labs(x = "Permeability.coefficient", y = "All_interactions", title = number)
print(plot)
}
list_pp  <- c("residue113","residue117", "residue132", "residue82", "residue16")
for (number in threshold_list) {
number_interaction <- c()
for (index in rownames(empty_dict[[paste0("df_threshold_", number)]])) {
sum_res = sum(empty_dict[[paste0("df_threshold_", number)]][index, list_pp])
number_interaction  <- append(number_interaction, sum_res)
}
empty_dict[[paste0("df_threshold_", number)]]['all_important_residues'] <- number_interaction
}
empty_dict
for (number in threshold_list) {
plot = ggplot(empty_dict[[paste0("df_threshold_", number)]], aes(x = Permeability.coefficient, y = all_important_residues, label = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class, col = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5) +
labs(x = "Permeability.coefficient", y = "All important residues", title = number)
print(plot)
}
for (number in threshold_list) {
number_interaction <- c()
for (index in rownames(empty_dict[[paste0("df_threshold_", number)]])) {
sum_res = sum(empty_dict[[paste0("df_threshold_", number)]][index, asp113])
number_interaction  <- append(number_interaction, sum_res)
}
empty_dict[[paste0("df_threshold_", number)]]['ASP113_types_int'] <- number_interaction
}
empty_dict
for (number in threshold_list) {
plot = ggplot(empty_dict[[paste0("df_threshold_", number)]], aes(x = Permeability.coefficient, y = ASP113_types_int, label = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class, col = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5) +
labs(x = "Accumulation_class", y = 'ASP113_types_int', title = number)
print(plot)
}
empty_dict$df_threshold_2[, 7:182]
for (number in threshold_list) {
list_residues = names(empty_dict[[paste0("df_threshold_", number)]][, 7:182])
myList_delete <- c()
myList_save <- c()
for (name in list_residues) {
sum_value = sum(empty_dict[[paste0("df_threshold_", number)]][name])
if (sum_value == 0) {
myList_delete <- append(myList_delete, name)
}
else {
myList_save <- append(myList_save, name)
}
}
empty_dict[[paste0("df_threshold_", number)]] = empty_dict[[paste0("df_threshold_", number)]][,!(names(empty_dict[[paste0("df_threshold_", number)]]) %in% myList_delete)]
print(number)
print('Number of features to save')
print(length(myList_save))
print('Number of features to delete')
print(length(myList_delete))
}
print(dim(empty_dict$df_threshold_2))
#names(empty_dict$df_threshold_2[5, 7:(dim(empty_dict$df_threshold_2)[2]-5)])
names(empty_dict$df_threshold_2)
for (number in threshold_list) {
plot <- ggplot(empty_dict[[paste0("df_threshold_", number)]], aes(x = Accumulation_class , y = all_important_residues)) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(x = "Accumulation_class", y = "All_interactions", title = number)
print(plot)
}
mydata.cor = cor(empty_dict$df_threshold_3[, 7:dim(empty_dict$df_threshold_3)[2]])
corrplot(mydata.cor)
delete_list <- c( "residue113", "residue117", "residue132", "residue82", "residue16")
for (number in threshold_list) {
empty_dict[[paste0("df_threshold_", number)]]['FormalCharge'] <- predict(preProcess(empty_dict[[paste0("df_threshold_", number)]]['FormalCharge'], method=c("range")),
empty_dict[[paste0("df_threshold_", number)]]['FormalCharge'])
empty_dict[[paste0("df_threshold_", number)]] = empty_dict[[paste0("df_threshold_", number)]][,!(names(empty_dict[[paste0("df_threshold_", number)]]) %in% delete_list)]
}
empty_dict$df_threshold_2[, 7: dim(empty_dict$df_threshold_2)[2]]
to_remove <- c("all_interactions", "all_important_residues", "ASP113_types_int")
# Preform PCA on our data
for (number in threshold_list) {
empty_dict[[paste0("df_threshold_", number)]] = empty_dict[[paste0("df_threshold_", number)]][ , !(names(empty_dict[[paste0("df_threshold_", number)]]) %in% to_remove)]
prcomp_df_threshold_3 <- prcomp(empty_dict[[paste0("df_threshold_", number)]][, 7: dim(empty_dict[[paste0("df_threshold_", number)]])[2]])
pca_df_threshold_3 <- data.frame(
PC1 = prcomp_df_threshold_3$x[, 1],
PC2 = prcomp_df_threshold_3$x[, 2],
classification = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class,
label = empty_dict[[paste0("df_threshold_", number)]]$Accumulation_class
)
plot = ggplot(pca_df_threshold_3, aes(x = PC1, y = PC2, label = label, col = classification)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)+
labs(x = "PC1", y = "PC2", title = number)
print(plot)
}
# Preform TSNE on our data
rtsne_chololate_num <- Rtsne(empty_dict$df_threshold_3[, 7: dim(empty_dict$df_threshold_3)[2]],
pca = FALSE, perplexity = 10,
theta = 0.0, check_duplicates = FALSE
)
tsne_chololate_num <- data.frame(
TSNE1 = rtsne_chololate_num$Y[, 1],
TSNE2 = rtsne_chololate_num$Y[, 2],
classification = empty_dict$df_threshold_3$Accumulation_class,
label = empty_dict$df_threshold_3$Accumulation_class
)
ggplot(tsne_chololate_num, aes(
x = TSNE1, y = TSNE2,
label = label, col = classification
)) +
geom_point() +
ggrepel::geom_text_repel(cex = 2.5)
empty_dict$df_threshold_3
names(empty_dict$df_threshold_3)
for (number in threshold_list) {
high_low <- c()
for (index in rownames(empty_dict[[paste0("df_threshold_", number)]])) {
high_low_value = empty_dict[[paste0("df_threshold_", number)]][index, "Accumulation_class"]
if(high_low_value == 'High') {
high_low = append(high_low, as.character(1))
} else {
high_low = append(high_low, as.character(0))
}
}
empty_dict[[paste0("df_threshold_", number)]]['High_Low_value'] <- high_low
}
empty_dict
empty_dict$df_threshold_3 %>%
count(High_Low_value) %>%
mutate(prop = n/sum(n))
# types of models to use
classifiers_to_use = c('Random Forest', 'Decition tree', 'SVM', 'kNeighbours')
#results dictionary
models_dict <- list()
model_data = data.frame(matrix(ncol = 3, nrow = 0))
colnames(model_data) <- c("Threshold", "Accuracy" , "Balanced_Accuracy")
for (classifier in classifiers_to_use) {
print(classifier)
models_dict[[classifier]] <- model_data
}
set.seed(123)
empty_dict_df_threshold_3_split <- initial_split(empty_dict$df_threshold_14 %>% select(-Canonical.SMILES, -Ligand, -Permeability.coefficient, -name, -Accumulation_class), strata = as.integer(empty_dict$df_threshold_14$High_Low_value), prop = 7/10)
empty_dict_df_threshold_3_train <- training(empty_dict_df_threshold_3_split)
empty_dict_df_threshold_3_test  <- testing(empty_dict_df_threshold_3_split)
nrow(empty_dict_df_threshold_3_train )
nrow(empty_dict_df_threshold_3_train )/nrow(empty_dict$df_threshold_4)
empty_dict_df_threshold_3_train$High_Low_value <- as.factor(empty_dict_df_threshold_3_train$High_Low_value)
empty_dict_df_threshold_3_test$High_Low_value <- as.factor(empty_dict_df_threshold_3_test$High_Low_value)
classifier = svm(formula = High_Low_value ~ .,
data = empty_dict_df_threshold_3_train,
type = 'C-classification',
kernel = 'linear')
set.seed(123)
empty_dict_df_threshold_3_split <- initial_split(empty_dict$df_threshold_3 %>% select(-Canonical.SMILES, -Ligand, -Permeability.coefficient, -name, -Accumulation_class), strata = as.integer(empty_dict$df_threshold_3$High_Low_value), prop = 7/10)
empty_dict_df_threshold_3_train <- training(empty_dict_df_threshold_3_split)
empty_dict_df_threshold_3_test  <- testing(empty_dict_df_threshold_3_split)
nrow(empty_dict_df_threshold_3_train )
nrow(empty_dict_df_threshold_3_train )/nrow(empty_dict$df_threshold_4)
empty_dict_df_threshold_3_train$High_Low_value <- as.factor(empty_dict_df_threshold_3_train$High_Low_value)
empty_dict_df_threshold_3_test$High_Low_value <- as.factor(empty_dict_df_threshold_3_test$High_Low_value)
classifier = svm(formula = High_Low_value ~ .,
data = empty_dict_df_threshold_3_train,
type = 'C-classification',
kernel = 'linear')
empty_dict$df_threshold_3
empty_dict$df_threshold_3[‘A.113.ASP..Salt’]
empty_dict$df_threshold_3$A.113.ASP..Salt
empty_dict$df_threshold_3$A.132.ARG..HAccep.nc
empty_dict$df_threshold_3$A.132.ARG..HAccep.nc
empty_dict$df_threshold_3$A.113.ASP..Salt
empty_dict$df_threshold_3
empty_dict$df_threshold_3$A.102.TYR..HAccep.nn
empty_dict$df_threshold_3$A.113.ASP..Salt
library(dplyr)
library(ggplot2)
library(plotly)
library(glue)
library(corrplot)
library(Rtsne)
library(tidymodels)
library('fastDummies')
library(randomForest)
library(caret)
library(patchwork)
library(gridExtra)
library(e1071)
library(class)
# read and look at data
data <- read.csv("data_final_project_cleaned.csv")
data
# columns names
head(names(data), 8)
data[, 7:10]
summary(data[, 7:10])
anyNA(data)
data[is.na(data)] <- as.integer(0)
anyNA(data)
list_residues = names(data[, 7:790])
myList_delete <- c()
myList_save <- c()
for (name in list_residues) {
sum_value = sum(data[name])
if (sum_value == 0) {
myList_delete <- append(myList_delete, name)
}
else {
myList_save <- append(myList_save, name)
}
}
df = data[,!(names(data) %in% myList_delete)]
print('Number of features to save')
print(length(myList_save))
print('Number of features to delete')
print(length(myList_delete))
df
asp113 <- c("A.113.ASP..HDonor.nc", "A.113.ASP..HDonor.cc", "A.113.ASP..HDonor.nn", "A.113.ASP..HDonor.cn", "A.113.ASP..Salt", "A.113.ASP..HPhob")
glu117 <- c("A.117.GLU..HDonor.nc", "A.117.GLU..HDonor.cn", "A.117.GLU..HDonor.nn", "A.117.GLU..HDonor.cc", "A.117.GLU..Salt", "A.117.GLU..HPhob", "A.117.GLU..XBond")
arg132 <- c("A.132.ARG..HAccep.nn", "A.132.ARG..HAccep.cn", "A.132.ARG..HAccep.cc", "A.132.ARG..HAccep.nc","A.132.ARG..XBond","A.132.ARG..Salt", "A.132.ARG..PiCat" )
arg82 <-  c("A.82.ARG..HAccep.nn", "A.82.ARG..HAccep.cn", "A.82.ARG..HAccep.cc", "A.82.ARG..HAccep.nc", "A.82.ARG..XBond","A.82.ARG..Salt","A.82.ARG..PiCat")
agr42 <-  c("A.42.ARG..HAccep.nn", "A.42.ARG..HAccep.cn", "A.42.ARG..HAccep.cc", "A.42.ARG..HAccep.nc","A.42.ARG..XBond","A.42.ARG..Salt","A.42.ARG..PiCat", "A.42.ARG..HPhob")
lys16 <-  c("A.16.LYS..HAccep.cn", "A.16.LYS..HAccep.cc", "A.16.LYS..XBond", "A.16.LYS..Salt", "A.16.LYS..PiCat", "A.16.LYS..HPhob")
list_important_res <-list(list1 = asp113, list2 = glu117, list3 = arg132 , list4= arg82 , list5 = lys16)
df[1,][, 0:6]
threshold_list <- c(1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
empty_dict <- list()
real_data = data.frame(matrix(ncol = 182, nrow = 0))
colnames(real_data) <- c(names(df))
for (number in threshold_list) {
empty_dict[[paste0("df_threshold_", number)]] <- real_data
for (name in unique(df$name)) {
#print(name)
small_data = df[df['name'] == name ,]
#print(dim(small_data))
threshold = dim(small_data)[1]/number
#print(threshold)
list_values_row <- c(small_data[1,][, 0:6])
#print(list_values_row)
for (residue in myList_save) {
sum_value = sum(small_data[residue])
if (sum_value >= threshold) {
list_values_row<-append(list_values_row, as.integer(1))
} else {
list_values_row<- append(list_values_row, as.integer(0))
}
}
empty_dict[[paste0("df_threshold_", number)]][nrow(empty_dict[[paste0("df_threshold_", number)]]) + 1,] <- list_values_row
}
for (column_p in list_important_res) {
new_col <- c()
for (index in rownames(empty_dict[[paste0("df_threshold_", number)]])) {
sum_res = sum(empty_dict[[paste0("df_threshold_", number)]][index, column_p])
if (sum_res > 0) {
new_col<-append(new_col, as.integer(1))
} else {
new_col<- append(new_col, as.integer(0))
}
}
name_Y =paste0("residue", strsplit(column_p[1], split = '[.]')[[1]])
empty_dict[[paste0("df_threshold_", number)]][name_Y[2]] <- new_col
}
}
